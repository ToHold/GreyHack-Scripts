getColoredStatus = function(statusBoolean)
	if statusBoolean then
		status = colors.red + "CLOSED"
	else
		status = colors.green + "OPEN"
	end if
	return status
end function

getRoutedServices = function(router, ip, silent = false)
	services = []
	if not silent then
		print("Scanning Routed Ports...")
	end if
	usedPorts = router.used_ports
	if usedPorts.len > 0 then
		servicesTables = "IP PORT SERVICE VERSION STATUS"
		for usedPort in usedPorts
			if ip != null then
				if usedPort.get_lan_ip == ip then
					portInfo = router.port_info(usedPort).split(" ")
					service = portInfo[0]
					version = portInfo[1]
					serviceMap = {"publicIP": router.public_ip, "ip": usedPort.get_lan_ip, "port": usedPort, "name": service, "version": version, "isClosed": usedPort.is_closed}
					services.push(serviceMap)
					if not silent then
						servicesTables = servicesTables + "\n" + serviceMap.ip + " " + serviceMap.port.port_number + " " + serviceMap.name + " " + serviceMap.version + " " + getColoredStatus(serviceMap.isClosed)
					end if
				end if
			else
				portInfo = router.port_info(usedPort).split(" ")
				service = portInfo[0]
				version = portInfo[1]
				serviceMap = {"publicIP": router.public_ip, "ip": usedPort.get_lan_ip, "port": usedPort, "name": service, "version": version, "isClosed": usedPort.is_closed}
				services.push(serviceMap)
				if not silent then
					servicesTables = servicesTables + "\n" + serviceMap.ip + " " + serviceMap.port.port_number + " " + serviceMap.name + " " + serviceMap.version + " " + getColoredStatus(serviceMap.isClosed)
				end if
			end if
		end for
		if not silent then
			print("Router NMAP :")
			print(format_columns(servicesTables))
		end if
	end if
	return services
end function

getDeviceServices = function(router, ip, silent = false)
	services = []
	if not silent then
		print("Scanning Devices...")
	end if
	devices = router.devices_lan_ip
	if devices.len > 0 then
		servicesTables = "IP PORT SERVICE VERSION STATUS"
		for device in devices
			ports = router.device_ports(device)
			for port in ports
				if ip != null then
					if device == ip then
						portInfo = router.port_info(port).split(" ")
						service = portInfo[0]
						version = portInfo[1]
						serviceMap = {"publicIP": router.public_ip, "ip": device, "port": port, "name": service, "version": version, "isClosed": port.is_closed}
						services.push(serviceMap)
						if not silent then
							servicesTables = servicesTables + "\n" + serviceMap.ip + " " + serviceMap.port.port_number + " " + serviceMap.name + " " + serviceMap.version + " " + getColoredStatus(serviceMap.isClosed)
						end if
					end if
				else
					portInfo = router.port_info(port).split(" ")
					service = portInfo[0]
					version = portInfo[1]
					serviceMap = {"publicIP": router.public_ip, "ip": device, "port": port, "name": service, "version": version, "isClosed": port.is_closed}
					services.push(serviceMap)
					if not silent then
						servicesTables = servicesTables + "\n" + serviceMap.ip + " " + serviceMap.port.port_number + " " + serviceMap.name + " " + serviceMap.version + " " + getColoredStatus(serviceMap.isClosed)
					end if
				end if
			end for
		end for

		if not silent then
			print("Devices NMAP :")
			print(format_columns(servicesTables))
		end if
	end if
	return services
end function

getLocalServices = function(router, silent = false)
	if not silent then
		print("Scanning Local Services...")
	end if
	services = []
	usedPorts = get_shell.host_computer.get_ports
	if usedPorts.len > 0 then
		servicesTables = "IP PORT SERVICE VERSION STATUS"
		for usedPort in usedPorts
			portInfo = router.port_info(usedPort).split(" ")
			service = portInfo[0]
			version = portInfo[1]
			serviceMap = {"publicIP": router.public_ip, "ip": usedPort.get_lan_ip, "port": usedPort, "name": service, "version": version, "isClosed": usedPort.is_closed}
			services.push(serviceMap)
			servicesTables = servicesTables + "\n" + serviceMap.ip + " " + serviceMap.port.port_number + " " + serviceMap.name + " " + serviceMap.version + " " + getColoredStatus(serviceMap.isClosed)
		end for
		if not silent then
			print("LOCAL NMAP :")
			print(format_columns(servicesTables))
		end if
	end if
	return services
end function

nmap = function(mode, ip, routerIp, silent = false)
	if mode == "ROUTER" then
		if routerIp then
			router = get_router(routerIp)
		else
			router = get_router(ip)
		end if
		if router == null then exit(colors.red + "No router found")
	
		if routerIp then
			getRoutedServices(router, ip, silent)
			getDeviceServices(router, ip, silent)
		else
			getRoutedServices(router)
			getDeviceServices(router)
		end if
	
		if not silent then
			print("FireWall :")
			print(router.firewall_rules)
		end if
	else if mode == "DEVICE" then
		router = get_router()

		getRoutedServices(router, ip, silent)
		getDeviceServices(router, ip, silent)

		if not silent then
			print("FireWall :")
			print(router.firewall_rules)
		end if
	else if mode == "LOCAL" then
		router = get_router()

		getLocalServices(router, silent)
	end if
end function