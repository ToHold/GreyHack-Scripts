import_code("../imports/colors.src")
import_code("../imports/nmap.src")
import_code("../imports/checks.src")
import_code("../imports/scanlib.src")
import_code("../imports/options.src")
import_code("../imports/files.src")

metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then metaxploit = include_lib(current_path() + "metaxploit.so")
if not metaxploit then exit("Cannot find Metaxploit Lib")

crypto = include_lib("/lib/crypto.so")
if not crypto then crypto = include_lib(current_path() + "crypto.so")
if not crypto then exit("Cannot find Crypto Lib")

globals.MODE = null
globals.victim_router_ip = null
globals.filter_ip = null
globals.target_ip = null
globals.injected_password = null
globals.selected_service = null
globals.memoryWeakIndex = 0
globals.memoryWeakKey = null
globals.memoryWeak = null
globals.unsecZoneIndex = 0
globals.services = null
globals.serviceIndex = 0
globals._overflow = null
globals.host_computer = host_computer
globals.userIndex = 0

mainMenu = function()
	clear_screen()
	print(colors.orange + "  *   )                                     )  ")
	print(colors.orange + "` )  /(     (                            ( /(  ")
	print(colors.orange + " ( )(_))   ))\   (    (    `  )     (    )\()) ")
	print(colors.orange + "(_(_())   /((_)  )\   )\   /(/(     )\  (_))/  ")
	print(colors.orange + "|_   _|  (_))(  ((_) ((_) ((_)_\   ((_) | |_   ")
	print(colors.orange + "  | |    | || | (_-< (_-< | '_ \) / _ \ |  _|  ")
	print(colors.orange + "  |_|     \_,_| /__/ /__/ | .__/  \___/  \__|  ")
	print(colors.orange + "                          |_|                  ")

	exitOption = new OptionHandler
	exitOption.construct(colors.green, "Exit")
	exitOption.handler = function()
		clear_screen()
		exit(colors.orange + "Bye Bye")
	end function

	routerOption = new OptionHandler
	routerOption.construct(colors.green, "ROUTER")
	routerOption.handler = function()
		globals.MODE = "ROUTER"
		setterMenu()
	end function

	deviceOption = new OptionHandler
	deviceOption.construct(colors.green, "DEVICE")
	deviceOption.handler = function()
		globals.MODE = "DEVICE"
		setterMenu()
	end function

	localOption = new OptionHandler
	localOption.construct(colors.green, "LOCAL")
	localOption.handler = function()
		globals.MODE = "LOCAL"
		setterMenu()
	end function

	// Sets Mode Web (Router) / Lan (remote lan PC) / Local (this PC)
	options = [
		exitOption,
		routerOption,
		deviceOption,
		localOption
	]

	mainMenuOptionsHandler = new OptionsHandler
	mainMenuOptionsHandler.construct(options, colors.green + "Select Mode : ")

	mainMenuOptionsHandler.display()
end function

setterMenu = function()
	clear_screen()
	getCurrentIPSet = function(ip)
		if ip != null then
			return " ( Currently set : " + ip + " )"
		else
			return ""
		end if
	end function

	if not MODE then mainMenu()

	backOption = new OptionHandler
	backOption.construct(colors.green, "Back")
	backOption.handler = function()
		mainMenu()
	end function

	options = [
		backOption
	]

	if MODE == "ROUTER" or MODE == "DEVICE" then
		print(colors.yellow + "At least IP to attack or Router IP is needed")

		routerIPOption = new OptionHandler
		routerIPOption.construct(colors.green, "Set Router IP" + getCurrentIPSet(victim_router_ip))
		routerIPOption.handler = function()
			while true
				next = true
				victim_router_ip = user_input(colors.green + "Choose Router IP (press enter to skip) : ")

				if victim_router_ip.len == 0 then 
					victim_router_ip = null
					break
				end if
				if victim_router_ip and not isIP(victim_router_ip) then
					print(colors.yellow + "Invalid Router IP")
					next = false
				end if
				if victim_router_ip and not isRouter(victim_router_ip) then
					print(colors.yellow + "Router not found")
					next = false
				end if

				globals.victim_router_ip = victim_router_ip

				if next then break
			end while
			// stay in setterMenu
			setterMenu()
		end function

		filterIPOption = new OptionHandler
		filterIPOption.construct(colors.green, "Set IP to filter" + getCurrentIPSet(filter_ip))
		filterIPOption.handler = function()
			while true
				next = true
				filter_ip = user_input(colors.green + "Choose IP to filter (press enter to skip) : ")

				if filter_ip.len == 0 then 
				filter_ip = null
					break
				end if
				if filter_ip and not isIP(victim_router_ip) then
					print(colors.yellow + "Invalid IP")
					next = false
				end if

				globals.filter_ip = filter_ip

				if next then break
			end while
			// stay in setterMenu
			setterMenu()
		end function

		options = options + [
			routerIPOption,
			filterIPOption
		]
	end if

	targetIPOption = new OptionHandler
	targetIPOption.construct(colors.green, "Set IP to target" + getCurrentIPSet(target_ip))
	targetIPOption.handler = function()
		while true
			next = true
			target_ip = user_input(colors.green + "Choose IP to target (press enter to skip) : ")

			if target_ip.len == 0 then 
				target_ip = null
				break
			end if
			if target_ip and not isIP(victim_router_ip) then
				print(colors.yellow + "Invalid IP")
				next = false
			end if

			globals.target_ip = target_ip

			if next then break
		end while
		// stay in setterMenu
		setterMenu()
	end function

	passInjectOption = new OptionHandler
	passInjectOption.construct(colors.green, "Set Password to inject" + getCurrentIPSet(injected_password))
	passInjectOption.handler = function()
		while true
			next = true
			injected_password = user_input(colors.green + "Choose Password to inject (press enter to skip) : ")

			if injected_password.len == 0 then 
				injected_password = null
				break
			end if

			globals.injected_password = injected_password

			if next then break
		end while
		// stay in setterMenu
		setterMenu()
	end function

	options = options + [
		targetIPOption,
		passInjectOption
	]

	continueOption = new OptionHandler
	continueOption.construct(colors.green, "Continue")
	continueOption.handler = function()
		if MODE == "LOCAL" then
			clear_screen()
			featuresMenu()
		else
			if filter_ip or victim_router_ip then 
				clear_screen()
				featuresMenu() 
			else
				setterMenu()
			end if
		end if
	end function

	options = options + [
		continueOption
	]

	setterMenuOptionsHandler = new OptionsHandler
	setterMenuOptionsHandler.construct(options, colors.green + "Select a Setter or Continue : ")

	setterMenuOptionsHandler.display()
end function

featuresMenu = function()
	backOption = new OptionHandler
	backOption.construct(colors.green, "Back")
	backOption.handler = function()
		clear_screen()
		setterMenu()
	end function

	nmapOption = new OptionHandler
	nmapOption.construct(colors.green, "NMAP")
	nmapOption.handler = function()
		if MODE == "ROUTER" or MODE == "DEVICE" then
			nmap(MODE, filter_ip, victim_router_ip)
		else
			nmap(MODE)
		end if

		// stay in attack menu
		featuresMenu()
	end function

	attackOption = new OptionHandler
	attackOption.construct(colors.green, "Attack")
	attackOption.handler = function()
		services = []
		if MODE == "ROUTER" then 
			if victim_router_ip and filter_ip then
				routedServices = getRoutedServices(get_router(victim_router_ip), filter_ip, true)
				services = services + routedServices
			else if victim_router_ip and not filter_ip then
				routedServices = getRoutedServices(get_router(victim_router_ip), null, true)
				services = services + routedServices
			else if filter_ip then
				routedServices = getRoutedServices(get_router(), filter_ip, true)
				services = services + routedServices
			end if
		end if
		if MODE == "DEVICE" then 
			if victim_router_ip and filter_ip then
				deviceServices = getDeviceServices(get_router(victim_router_ip), filter_ip, true)
				services = services + deviceServices
			else if victim_router_ip and not filter_ip then
				deviceServices = getDeviceServices(get_router(victim_router_ip), null, true)
				services = services + deviceServices
			else if filter_ip then
				deviceServices = getDeviceServices(get_router(), filter_ip, true)
				services = services + deviceServices
			end if
		else if MODE == "LOCAL" then  
			localServices = getLocalServices(get_router(), true)
			services = services + localServices
		end if

		globals.services = services
		servicesSelectMenu()

		// stay in attack menu
		featuresMenu()
	end function

	options = [
		backOption,
		nmapOption,
		attackOption
	]

	featuresMenuOptionsHandler = new OptionsHandler
	featuresMenuOptionsHandler.construct(options, colors.green + "Choose option : ")

	featuresMenuOptionsHandler.display()
end function

servicesSelectMenu = function()
	if globals.serviceIndex > services.len then globals.serviceIndex = 0
	while serviceIndex < services.len
		backOption = new OptionHandler
		backOption.construct(colors.green, "Back")
		backOption.handler = function()
			clear_screen()
			featuresMenu()
		end function

		servicesOptions = [
			backOption
		]

		if serviceIndex != 0 then
			previousOption = new OptionHandler
			previousOption.construct(colors.green, "Previous service ( host: " + services[serviceIndex - 1].ip + " service: " + services[serviceIndex - 1].name + " v." + services[serviceIndex - 1].version + " )")
			previousOption.handler = function()
				globals.serviceIndex = serviceIndex - 1
			end function

			servicesOptions = servicesOptions + [
				previousOption
			]
		else
			previousOption = new OptionHandler
			previousOption.construct(colors.orange, "Previous service ( No previous )")
			previousOption.handler = function()
			end function

			servicesOptions = servicesOptions + [
				previousOption
			]
		end if

		selectOption = new OptionHandler
		selectOption.construct(colors.green, "Select service ( host: " + services[serviceIndex].ip + " service: " + services[serviceIndex].name + " v." + services[serviceIndex].version + " )")
		selectOption.handler = function()
			globals.selected_service = services[serviceIndex]
			libAttackHandler(selected_service)
		end function

		servicesOptions = servicesOptions + [
			selectOption
		]

		if serviceIndex != services.len - 1 then
			nextOption = new OptionHandler
			nextOption.construct(colors.green, "Next service ( host: " + services[serviceIndex + 1].ip + " service: " + services[serviceIndex + 1].name + " v." + services[serviceIndex + 1].version + " )")
			nextOption.handler = function()
				globals.serviceIndex = serviceIndex + 1
			end function

			servicesOptions = servicesOptions + [
				nextOption
			]
		else
			nextOption = new OptionHandler
			nextOption.construct(colors.orange, "Next service ( No next )")
			nextOption.handler = function()
			end function

			servicesOptions = servicesOptions + [
				nextOption
			]
		end if

		clear_screen()
		servicesSelectMenuOptionsHandler = new OptionsHandler
		servicesSelectMenuOptionsHandler.construct(servicesOptions, colors.green + "Choose Service : ")

		servicesSelectMenuOptionsHandler.display()
	end while
end function

libAttackHandler = function(service)

	if service.lib == null then
		if MODE == "ROUTER" then 
			netSession = metaxploit.net_use(service.publicIP, service.port.port_number())
		else
			netSession = metaxploit.net_use(service.ip, service.port.port_number())
		end if
	
		service.metalib = netSession.dump_lib()
		service.lib = scanlib(service, metaxploit)
	end if

	if globals.memoryWeakIndex > service.lib.memoryWeaks.len then globals.memoryWeakIndex = 0
	while memoryWeakIndex < service.lib.memoryWeaks.len
		backOption = new OptionHandler
		backOption.construct(colors.green, "Back")
		backOption.handler = function()
			servicesSelectMenu()
		end function

		memoryWeaksOptions = [
			backOption
		]

		if memoryWeakIndex != 0 then
			previousOption = new OptionHandler
			previousOption.construct(colors.green, "Previous Memory Weaks ( " + selected_service.lib.memoryWeaks.indexes[memoryWeakIndex - 1] +" )")
			previousOption.handler = function()
				globals.memoryWeakIndex = memoryWeakIndex - 1
			end function

			memoryWeaksOptions = memoryWeaksOptions + [
				previousOption
			]
		else
			previousOption = new OptionHandler
			previousOption.construct(colors.orange, "Previous Memory Weaks ( No previous )")
			previousOption.handler = function()
			end function

			memoryWeaksOptions = memoryWeaksOptions + [
				previousOption
			]
		end if

		selectOption = new OptionHandler
		selectOption.construct(colors.green, "Select current Memory Weaks ( " + selected_service.lib.memoryWeaks.indexes[memoryWeakIndex] +" )")
		selectOption.handler = function()
			globals.memoryWeakKey = selected_service.lib.memoryWeaks.indexes[memoryWeakIndex]
			globals.memoryWeak = selected_service.lib.memoryWeaks[memoryWeakKey]
			unsecZoneHandler()
		end function

		memoryWeaksOptions = memoryWeaksOptions + [
			selectOption
		]

		if memoryWeakIndex != service.lib.memoryWeaks.len - 1 then
			nextOption = new OptionHandler
			nextOption.construct(colors.green, "Next Memory Weaks ( " + selected_service.lib.memoryWeaks.indexes[memoryWeakIndex + 1] +" )")
			nextOption.handler = function()
				globals.memoryWeakIndex = memoryWeakIndex + 1
			end function

			memoryWeaksOptions = memoryWeaksOptions + [
				nextOption
			]
		else
			nextOption = new OptionHandler
			nextOption.construct(colors.orange, "Next Memory Weaks ( No next )")
			nextOption.handler = function()
			end function

			memoryWeaksOptions = memoryWeaksOptions + [
				nextOption
			]
		end if

		clearOption = new OptionHandler
		clearOption.construct(colors.yellow, "Clear screen")
		clearOption.handler = function()
			clear_screen
		end function

		memoryWeaksOptions = memoryWeaksOptions + [
			clearOption
		]

		libAttackHandlerOptionsHandler = new OptionsHandler
		libAttackHandlerOptionsHandler.construct(memoryWeaksOptions, colors.green + "Choose Memory Weaks : ")

		libAttackHandlerOptionsHandler.display()
	end while
end function

unsecZoneHandler = function()
	if globals.unsecZoneIndex > selected_service.lib.memoryWeaks.len then globals.unsecZoneIndex = 0
	while unsecZoneIndex < memoryWeak.len
		backOption = new OptionHandler
		backOption.construct(colors.green, "Back")
		backOption.handler = function()
			libAttackHandler(globals.selected_service)
		end function

		unsecZoneOptions = [
			backOption
		]

		if unsecZoneIndex != 0 then
			previousOption = new OptionHandler
			previousOption.construct(colors.green, "Previous Unsecured Zone ( " + memoryWeak[unsecZoneIndex - 1] +" )")
			previousOption.handler = function()
				globals.unsecZoneIndex = unsecZoneIndex - 1
			end function

			unsecZoneOptions = unsecZoneOptions + [
				previousOption
			]
		else
			previousOption = new OptionHandler
			previousOption.construct(colors.orange, "Previous Unsecured Zone ( No previous )")
			previousOption.handler = function()
			end function

			unsecZoneOptions = unsecZoneOptions + [
				previousOption
			]
		end if

		globals.unsecZone = memoryWeak[unsecZoneIndex]

		selectOption = new OptionHandler
		selectOption.construct(colors.green, "Select current Unsecured Zone ( " + unsecZone +" )")
		selectOption.handler = function()
			globals.optArgs = null

			nullArgsOption = new OptionHandler
			nullArgsOption.construct(colors.green, "No Args")
			nullArgsOption.handler = function()
				globals.optArgs = null
			end function

			targetIPArgsOption = new OptionHandler
			targetIPArgsOption.construct(colors.green, "Victim device IP to target (from setter)")
			targetIPArgsOption.handler = function()
				globals.optArgs = globals.target_ip
			end function

			passInjectArgsOption = new OptionHandler
			passInjectArgsOption.construct(colors.green, "Injected password (from setter)")
			passInjectArgsOption.handler = function()
				globals.optArgs = globals.injected_password
			end function

			optionsArgs = [nullArgsOption, targetIPArgsOption, passInjectArgsOption]

			optionsHandlerArgs = new OptionsHandler
			optionsHandlerArgs.construct(optionsArgs, colors.green + "Select which args should use for Overflow : ")
			optionsHandlerArgs.display()

			if optArgs != null then
				overflowHandler(
					selected_service.metalib.overflow(memoryWeakKey, unsecZone, optArgs)
				)
			else
				overflowHandler(
					selected_service.metalib.overflow(memoryWeakKey, unsecZone)
				)
			end if
		end function

		unsecZoneOptions = unsecZoneOptions + [
			selectOption
		]

		if unsecZoneIndex != memoryWeak.len - 1 then
			nextOption = new OptionHandler
			nextOption.construct(colors.green, "Next Unsecured Zone ( " + memoryWeak[unsecZoneIndex + 1] +" )")
			nextOption.handler = function()
				globals.unsecZoneIndex = unsecZoneIndex + 1
			end function

			unsecZoneOptions = unsecZoneOptions + [
				nextOption
			]
		else
			nextOption = new OptionHandler
			nextOption.construct(colors.orange, "Next Unsecured Zone ( No next )")
			nextOption.handler = function()
			end function

			unsecZoneOptions = unsecZoneOptions + [
				nextOption
			]
		end if

		clearOption = new OptionHandler
		clearOption.construct(colors.yellow, "Clear screen")
		clearOption.handler = function()
			clear_screen
		end function

		unsecZoneOptions = unsecZoneOptions + [
			clearOption
		]

		unsecZoneOptionsHandler = new OptionsHandler
		unsecZoneOptionsHandler.construct(unsecZoneOptions, colors.green + "Choose Unsecured Zone : ")

		unsecZoneOptionsHandler.display()
	end while
end function

overflowHandler = function(_overflow)
	globals._overflow = _overflow

	print("Result Type : " + typeof(_overflow))

	if typeof(_overflow) ==  "shell" then
		overflowShellHandler()
	else if typeof(_overflow) ==  "computer" then
		overflowComputerHandler()
	else if typeof(_overflow) ==  "file" then
		overflowFileHandler()
	else if typeof(_overflow) ==  "number" then
		overflowNumberHandler()
	else if typeof(_overflow) ==  "string" then
		overflowStringHandler()
	end if
end function

overflowShellHandler = function()
	backOption = new OptionHandler
	backOption.construct(colors.green, "Back")
	backOption.handler = function()
		unsecZoneHandler()
	end function

	startTerminalOption = new OptionHandler
	startTerminalOption.construct(colors.green, "Start Terminal")
	startTerminalOption.handler = function()
		globals._overflow.start_terminal()

		overflowShellHandler()
	end function

	overflowShellOptions = [
		backOption,
		startTerminalOption
	]

	optionsHandler = new OptionsHandler
	optionsHandler.construct(overflowShellOptions, colors.green + "Select action : ")

	optionsHandler.display()
end function

overflowComputerHandler = function()
	backOption = new OptionHandler
	backOption.construct(colors.green, "Back")
	backOption.handler = function()
		unsecZoneHandler()
	end function

	displayFolderOption = new OptionHandler
	displayFolderOption.construct(colors.green, "Display Folder content")
	displayFolderOption.handler = function()
		folderPath = user_input("Select Folder Path :")
		if folderPath.len > 0 then
			showFolder(globals._overflow.File(folderPath))
		end if
		overflowComputerHandler()
	end function

	displayFileOption = new OptionHandler
	displayFileOption.construct(colors.green, "Display File content")
	displayFileOption.handler = function()
		filePath = user_input("Select File Path :")
		if filePath.len > 0 then
			showFile(globals._overflow.File(filePath))
		end if
		overflowComputerHandler()
	end function

	displayDecryptedFileOption = new OptionHandler
	displayDecryptedFileOption.construct(colors.green, "Display Decrypted User like File (passwd, Mail.txt, Bank.txt)")
	displayDecryptedFileOption.handler = function()
		filePath = user_input("Select File Path :")
		if filePath.len > 0 then
			decryptUserFile(globals._overflow.File(filePath))
		end if
		overflowComputerHandler()
	end function

	overflowHandlerOptions = [
		backOption,
		displayFolderOption,
		displayFileOption,
		displayDecryptedFileOption
	]

	globals.passwdFile = globals._overflow.File("/etc/passwd")
	if passwdFile.has_permission("r") then
		displayPasswdOption = new OptionHandler
		displayPasswdOption.construct(colors.green, "Display Passwd File")
		displayPasswdOption.handler = function()
			showFile(globals.passwdFile)
			overflowComputerHandler()
		end function

		displayDecryptedPasswdOption = new OptionHandler
		displayDecryptedPasswdOption.construct(colors.green, "Display Decrypted Passwd File")
		displayDecryptedPasswdOption.handler = function()
			decryptUserFile(globals.passwdFile)
			overflowComputerHandler()
		end function

		overflowHandlerOptions = overflowHandlerOptions + [
			displayPasswdOption,
			displayDecryptedPasswdOption
		]
	end if

	optionsHandler = new OptionsHandler
	optionsHandler.construct(overflowHandlerOptions, colors.green + "Select action : ")

	optionsHandler.display()
end function

overflowFileHandler = function()
	backOption = new OptionHandler
	backOption.construct(colors.green, "Back")
	backOption.handler = function()
		unsecZoneHandler()
	end function

	overflowFileOptions = [
		backOption
	]

	print(globals._overflow)
	if globals._overflow.has_permission("r") then
		if globals._overflow.is_folder then
			displayFolderOption = new OptionHandler
			displayFolderOption.construct(colors.green, "Display Folder content")
			displayFolderOption.handler = function()
				print("Folder path : " + globals._overflow.path())
				showFolder(globals._overflow)
				overflowFileHandler()
			end function

			overflowFileOptions = overflowFileOptions + [
				displayFolderOption
			]
		else
			displayFileOption = new OptionHandler
			displayFileOption.construct(colors.green, "Display File content")
			displayFileOption.handler = function()
				print("File path : " + globals._overflow.path())
				showFile(globals._overflow)
				overflowFileHandler()
			end function

			displayDecryptedFileOption = new OptionHandler
			displayDecryptedFileOption.construct(colors.green, "Display Decrypted User like File (passwd, Mail.txt, Bank.txt)")
			displayDecryptedFileOption.handler = function()
				print("File path : " + globals._overflow.path())
				decryptUserFile(globals._overflow)
			end function

			overflowFileOptions = overflowFileOptions + [
				displayFileOption,
				displayDecryptedFileOption
			]
		end if
	else
		print(colors.red + "No permission")
	end if

	optionsHandler = new OptionsHandler
	optionsHandler.construct(overflowFileOptions, colors.green + "Select action : ")

	optionsHandler.display()
end function

overflowNumberHandler = function()
	backOption = new OptionHandler
	backOption.construct(colors.green, "Back")
	backOption.handler = function()
		unsecZoneHandler()
	end function

	overflowNumberOptions = [
		backOption
	]
	
	print(globals._overflow)

	optionsHandler = new OptionsHandler
	optionsHandler.construct(overflowNumberOptions, colors.green + "Select action : ")

	optionsHandler.display()
end function

overflowStringHandler = function()
	backOption = new OptionHandler
	backOption.construct(colors.green, "Back")
	backOption.handler = function()
		unsecZoneHandler()
	end function

	overflowNumberOptions = [
		backOption
	]

	print(globals._overflow)

	optionsHandler = new OptionsHandler
	optionsHandler.construct(overflowStringOptions, colors.green + "Select action : ")

	optionsHandler.display()
end function

mainMenu()